version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-ecr: circleci/aws-ecr@4.0.1
  aws-ecs: circleci/aws-ecs@0.0.7

executors:
  default:
    docker:
      - image: circleci/python:3.7.2

jobs:
  build:
    working_directory: ~/repo
    executor: default
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - aws-ecr/ecr-login
      - run:
          name: Pull python docker image
          command: |
            docker pull python:3.7.3-alpine
      - run:
          name: Pull postgres docker image
          command: |
            docker pull postgres:latest
      - run:
          name: Pull base docker image
          command: |
            docker pull $AWS_ECR_ACCOUNT_URL/backend:base || true
      - run:
          name: Pull libs docker image
          command: |
            docker pull $AWS_ECR_ACCOUNT_URL/backend:libs || true
      - run:
          name: Pull code docker image
          command: |
            docker pull $AWS_ECR_ACCOUNT_URL/backend:latest || true
      - run:
          name: Pull test docker image
          command: |
            docker pull $AWS_ECR_ACCOUNT_URL/backend:test || true
      - run:
          name: Build base docker image
          command: |
            docker build \
              --target base \
              --cache-from python:3.7.3-alpine \
              --cache-from $AWS_ECR_ACCOUNT_URL/backend:base \
              --tag $AWS_ECR_ACCOUNT_URL/backend:base-${CIRCLE_SHA1} \
              .
      - run:
          name: Build libs docker image
          command: |
            docker build \
              --target libs \
              --cache-from $AWS_ECR_ACCOUNT_URL/backend:base-${CIRCLE_SHA1} \
              --cache-from $AWS_ECR_ACCOUNT_URL/backend:libs \
              --tag $AWS_ECR_ACCOUNT_URL/backend:libs-${CIRCLE_SHA1} \
              .
      - run:
          name: Build code docker image
          command: |
            docker build \
              --target code \
              --build-arg BUILD_NUM=${CIRCLE_BUILD_NUM} \
              --build-arg SHA1=${CIRCLE_SHA1} \
              --cache-from $AWS_ECR_ACCOUNT_URL/backend:libs-${CIRCLE_SHA1} \
              --cache-from $AWS_ECR_ACCOUNT_URL/backend:latest \
              --tag $AWS_ECR_ACCOUNT_URL/backend:${CIRCLE_SHA1} \
              .
      - run:
          name: Build test docker image
          command: |
            docker build \
              --target test \
              --cache-from $AWS_ECR_ACCOUNT_URL/backend:${CIRCLE_SHA1} \
              --cache-from $AWS_ECR_ACCOUNT_URL/backend:test \
              --tag $AWS_ECR_ACCOUNT_URL/backend:test-${CIRCLE_SHA1} \
              .
      - run:
          name: Push base docker image
          command: |
            docker tag $AWS_ECR_ACCOUNT_URL/backend:base-${CIRCLE_SHA1} $AWS_ECR_ACCOUNT_URL/backend:base
            docker push $AWS_ECR_ACCOUNT_URL/backend:base-${CIRCLE_SHA1}
            docker push $AWS_ECR_ACCOUNT_URL/backend:base
      - run:
          name: Push libs docker image
          command: |
            docker tag $AWS_ECR_ACCOUNT_URL/backend:libs-${CIRCLE_SHA1} $AWS_ECR_ACCOUNT_URL/backend:libs
            docker push $AWS_ECR_ACCOUNT_URL/backend:libs-${CIRCLE_SHA1}
            docker push $AWS_ECR_ACCOUNT_URL/backend:libs
      - run:
          name: Run flake8
          command: |
            docker run --rm $AWS_ECR_ACCOUNT_URL/backend:test-${CIRCLE_SHA1} flake8 backend
      - run:
          name: Run mypy
          command: |
            docker run --rm $AWS_ECR_ACCOUNT_URL/backend:test-${CIRCLE_SHA1} mypy backend
      - run:
          name: Run nosetests
          command: |
            docker network create test
            docker run -d \
              --name postgres \
              --network test \
              -e POSTGRES_DB=backend_test_db \
              -e POSTGRES_USER=backend \
              -e POSTGRES_PASSWORD=secret \
              postgres:latest
            docker create --name test \
              --network test \
              --env BACKEND__POSTGRES__HOST=postgres \
              --env BACKEND__POSTGRES__PASSWORD=secret \
              $AWS_ECR_ACCOUNT_URL/backend:test-${CIRCLE_SHA1} nosetests backend
            docker cp ~/repo/backend/tests test:/code/backend/tests
            docker start --attach test
            docker stop postgres
            docker rm postgres
            docker rm test
            docker network rm test
      - run:
          name: Push code docker image
          command: |
            docker tag $AWS_ECR_ACCOUNT_URL/backend:${CIRCLE_SHA1} $AWS_ECR_ACCOUNT_URL/backend:latest
            docker push $AWS_ECR_ACCOUNT_URL/backend:${CIRCLE_SHA1}
            docker push $AWS_ECR_ACCOUNT_URL/backend:latest
      - run:
          name: Push test docker image
          command: |
            docker tag $AWS_ECR_ACCOUNT_URL/backend:test-${CIRCLE_SHA1} $AWS_ECR_ACCOUNT_URL/backend:test
            docker push $AWS_ECR_ACCOUNT_URL/backend:test-${CIRCLE_SHA1}
            docker push $AWS_ECR_ACCOUNT_URL/backend:test
  deploy:
    working_directory: ~/repo
    executor: default
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/repo
      - aws-cli/install
      - aws-ecs/update-service:
          family: "backend"
          cluster-name: "zilch"
          container-image-name-updates: "container=backend,tag=${CIRCLE_SHA1}"
          verify-revision-is-deployed : false

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
